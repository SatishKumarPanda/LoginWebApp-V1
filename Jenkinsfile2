pipeline {
    agent any 
    tools {
        maven 'Maven'
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('jenkins-aws-secret-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws-secret-access-key')
        DOCKERHUB_CREDENTIALS  = credentials('docker-hub')
        DEPLOYMENT_SERVER      = 'ec2-user@13.233.230.148'
        SSH_OPTIONS            = '-o StrictHostKeyChecking=no'
    }      

    stages {
        // Existing stages...

        stage('Build and Push Docker Images') {
            steps {
                sshagent(['Tomcat']) {
                    echo 'Building, pushing application images, and handling phpMyAdmin...'
                    script {
                        withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_PSW', usernameVariable: 'DOCKER_USR')]) {
                            sh '''
                                ssh ${SSH_OPTIONS} ${DEPLOYMENT_SERVER} "
                                cd /home/ec2-user/dockerfiles &&
                                sudo chmod 777 /var/run/docker.sock &&
                                docker build -t my-image-1 -f Dockerfile-mysql . &&
                                docker build -t my-image-2 -f Dockerfile-tomcat . &&
                                
                                # Pulling phpMyAdmin image
                                docker pull phpmyadmin/phpmyadmin && \
                                
                                # Creating a network
                                docker network create my-network || true && \
                                
                                # Running MySQL container
                                docker run -d --name my-mysql-container --network my-network -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=mydb -p 3306:3306 my-image-1 && \

                                # Running Tomcat container linked to MySQL
                                docker run -d --name my-tomcat-container --network my-network -p 8082:8080 my-image-2 && \
                                
                                # Running phpMyAdmin container linked to MySQL
                                docker run -d --name my-phpmyadmin --network my-network -e PMA_HOST=my-mysql-container -p 8080:80 phpmyadmin/phpmyadmin && \

                                # Tagging and pushing application images
                                echo $DOCKER_PSW | docker login -u $DOCKER_USR --password-stdin &&
                                docker tag my-image-1 satishkumarpanda/my-mysql &&
                                docker tag my-image-2 satishkumarpanda/my-tomcat &&
                                docker tag phpmyadmin/phpmyadmin satishkumarpanda/my-phpmyadmin &&
                                
                                # Pushing images to Docker Hub
                                docker push satishkumarpanda/my-mysql &&
                                docker push satishkumarpanda/my-tomcat &&
                                docker push satishkumarpanda/my-phpmyadmin &&
                                docker logout
                                "
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy and Clean Up') {
            steps {
                sshagent(['Tomcat']) {
                    echo 'Deploying containers and cleaning up...'
                    sh '''
                        ssh ${SSH_OPTIONS} ${DEPLOYMENT_SERVER} "
                        # Create network
                        docker network create my-network || true &&

                        # Deploy containers
                        docker run -d --name my-mysql-container --network my-network -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=mydb -p 3306:3306 satishkumarpanda/my-mysql &&
                        docker run -d --name my-tomcat-container --network my-network -p 8082:8080 satishkumarpanda/my-tomcat &&
                        docker run -d --name my-phpmyadmin --network my-network -e PMA_HOST=my-mysql-container -p 8080:80 satishkumarpanda/my-phpmyadmin &&
                        
                        # Clean up old images
                        docker rmi -f satishkumarpanda/my-mysql satishkumarpanda/my-tomcat &&
                        rm -rf /home/ec2-user/dockerfiles/*
                        "
                    '''
                }
            }
        }

        // Existing stages...
    }  
}
